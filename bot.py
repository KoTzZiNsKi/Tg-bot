import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import logging
import sqlite3

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8080446742:AAHvpyBhyMqxsBNNz-fCt9pkPaj_Q1nHw1g"

# –í–∞—à Telegram ID
AUTHORIZED_USER_ID = 5428660796

# üîß –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def get_db_connection():
    conn = sqlite3.connect('questions.db')
    conn.row_factory = sqlite3.Row
    return conn

# üéì –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
QUESTION = 0

# üü¢ –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /test —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")

# üß™ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["score"] = 0
    context.user_data["current_index"] = 0
    await send_next_question(update, context)
    return QUESTION

# üì© –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
async def send_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data["current_index"]
    conn = get_db_connection()
    questions = conn.execute('SELECT * FROM questions').fetchall()
    conn.close()

    if index < len(questions):
        q = questions[index]
        reply_markup = ReplyKeyboardMarkup(
            [[q['option1'], q['option2'], q['option3']]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        await update.message.reply_text(q['question'], reply_markup=reply_markup)
    else:
        total = len(questions)
        correct = context.user_data["score"]
        points = round((correct / total) * 10, 1)
        await update.message.reply_text(
            f"üßæ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\nüéØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {points} –∏–∑ 10.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data["current_index"]
    user_answer = update.message.text.strip()
    conn = get_db_connection()
    questions = conn.execute('SELECT * FROM questions').fetchall()
    conn.close()

    correct = questions[index]['answer']
    if user_answer == correct:
        context.user_data["score"] += 1

    context.user_data["current_index"] += 1
    return await send_next_question(update, context)

# ‚ùå –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != AUTHORIZED_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    text = " ".join(context.args)
    parts = text.split("|")

    if len(parts) != 5:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü—Ä–∏–º–µ—Ä:\n/add_question –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | –í–∞—Ä–∏–∞–Ω—Ç3 | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"
        )
        return

    question = parts[0].strip()
    options = [parts[1].strip(), parts[2].strip(), parts[3].strip()]
    correct = parts[4].strip()

    if correct not in options:
        await update.message.reply_text("‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    conn = get_db_connection()
    conn.execute(
        'INSERT INTO questions (question, option1, option2, option3, answer) VALUES (?, ?, ?, ?, ?)',
        (question, options[0], options[1], options[2], correct)
    )
    conn.commit()
    conn.close()

    await update.message.reply_text(
        f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω:\n{question}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(options)}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct}"
    )

# üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
async def show_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != AUTHORIZED_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    conn = get_db_connection()
    questions = conn.execute('SELECT * FROM questions').fetchall()
    conn.close()

    if not questions:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.")
    else:
        msg = ""
        for i, q in enumerate(questions, 1):
            msg += f"{i}. {q['question']} ‚Äî ‚úÖ –û—Ç–≤–µ—Ç: {q['answer']}\n"
        await update.message.reply_text(msg)

# üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å
async def delete_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != AUTHORIZED_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /delete_question <–Ω–æ–º–µ—Ä>")
        return

    index = int(context.args[0]) - 1
    conn = get_db_connection()
    questions = conn.execute('SELECT * FROM questions').fetchall()

    if 0 <= index < len(questions):
        removed = questions[index]
        conn.execute('DELETE FROM questions WHERE id = ?', (removed['id'],))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"üóë –£–¥–∞–ª—ë–Ω –≤–æ–ø—Ä–æ—Å: {removed['question']}")
    else:
        conn.close()
        await update.message.reply
::contentReference[oaicite:25]{index=25}
 
