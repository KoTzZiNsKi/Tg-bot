import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
QUESTIONS = [
    {
        "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?",
        "options": ["3", "4", "5"],
        "answer": "4"
    },
    {
        "question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
        "options": ["–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–ú–∞–¥—Ä–∏–¥"],
        "answer": "–ü–∞—Ä–∏–∂"
    }
]

score = 0
QUESTION = 0


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /test —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.")


# –ö–æ–º–∞–Ω–¥–∞ /test
async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global score
    score = 0
    context.user_data["questions"] = QUESTIONS.copy()
    context.user_data["current_index"] = 0
    context.user_data["question_count"] = len(QUESTIONS)
    await send_next_question(update, context)
    return QUESTION


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data["current_index"]
    if index < len(context.user_data["questions"]):
        q = context.user_data["questions"][index]
        reply_markup = ReplyKeyboardMarkup(
            [[opt] for opt in q["options"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        await update.message.reply_text(q["question"], reply_markup=reply_markup)
    else:
        total = context.user_data["question_count"]
        points = round((score / total) * 10, 1)
        await update.message.reply_text(
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {points} –∏–∑ 10 –±–∞–ª–ª–æ–≤.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global score
    index = context.user_data["current_index"]
    user_answer = update.message.text
    correct = context.user_data["questions"][index]["answer"]

    if user_answer == correct:
        score += 1

    context.user_data["current_index"] += 1
    return await send_next_question(update, context)


# –û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# –ö–æ–º–∞–Ω–¥–∞ /add_question
async def add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = " ".join(context.args)
    parts = text.split("|")

    if len(parts) != 5:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π: /add_question –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | –í–∞—Ä–∏–∞–Ω—Ç3 | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π"
        )
        return

    question = parts[0].strip()
    options = [parts[1].strip(), parts[2].strip(), parts[3].strip()]
    correct = parts[4].strip()

    if correct not in options:
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    QUESTIONS.append({
        "question": question,
        "options": options,
        "answer": correct
    })

    await update.message.reply_text(f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω:\n{question}\nüß© –í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(options)}\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct}")


# –ö–æ–º–∞–Ω–¥–∞ /show_questions
async def show_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not QUESTIONS:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.")
    else:
        msg = ""
        for i, q in enumerate(QUESTIONS, 1):
            msg += f"{i}. {q['question']} ‚Äî –û—Ç–≤–µ—Ç: {q['answer']}\n"
        await update.message.reply_text(msg)


# –ö–æ–º–∞–Ω–¥–∞ /delete_question
async def delete_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /delete_question <–Ω–æ–º–µ—Ä>")
        return

    index = int(context.args[0]) - 1
    if 0 <= index < len(QUESTIONS):
        removed = QUESTIONS.pop(index)
        await update.message.reply_text(f"üóë –£–¥–∞–ª—ë–Ω –≤–æ–ø—Ä–æ—Å: {removed['question']}")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(os.getenv("TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("test", test)],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_question", add_question))
    app.add_handler(CommandHandler("show_questions", show_questions))
    app.add_handler(CommandHandler("delete_question", delete_question))

    await app.run_polling()


# üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥ Render
if __name__ == "__main__":
    import asyncio
    try:
        asyncio.run(main())
    except RuntimeError:
        loop = asyncio.get_event_loop()
        loop.create_task(main())
        loop.run_forever()
